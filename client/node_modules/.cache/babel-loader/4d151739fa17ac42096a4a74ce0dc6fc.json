{"ast":null,"code":"var _jsxFileName = \"/Users/kirisawakohei/Works/React/KashitaruApp/client/src/Component/sharePageScreen/index.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nconst SharePage = ({\n  store,\n  requestData,\n  receiveDataSuccess,\n  receiveDataFailed\n}) => {\n  const _store$characters = store.characters,\n        isFetching = _store$characters.isFetching,\n        characterArray = _store$characters.characterArray;\n\n  const handleFetchData = () => {\n    requestData(); // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n\n    axios.get('/api/characters').then(response => {\n      // データ受け取りに成功した場合\n      const _characterArray = response.data;\n      receiveDataSuccess(_characterArray); // データをstoreに保存するとともにisFetchingをfalseに\n    }).catch(err => {\n      // データ受け取りに失敗した場合\n      console.error(new Error(err));\n      receiveDataFailed(); // isFetchingをfalseに\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, isFetching // isFetchingの値で分岐\n  ? React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Now Loading...\") // データをFetch中ならばローディングアイコンを表示\n  : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => handleFetchData(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"fetch data\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, characterArray.map(character => React.createElement(\"li\", {\n    key: character._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"\".concat(character.name, \" (\").concat(character.age, \")\"))))));\n};\n\nexport default SharePage;","map":{"version":3,"sources":["/Users/kirisawakohei/Works/React/KashitaruApp/client/src/Component/sharePageScreen/index.js"],"names":["React","axios","SharePage","store","requestData","receiveDataSuccess","receiveDataFailed","characters","isFetching","characterArray","handleFetchData","get","then","response","_characterArray","data","catch","err","console","error","Error","map","character","_id","name","age"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,WAAT;AAAsBC,EAAAA,kBAAtB;AAA0CC,EAAAA;AAA1C,CAAD,KAAmE;AAAA,4BAC5CH,KAAK,CAACI,UADsC;AAAA,QAC3EC,UAD2E,qBAC3EA,UAD2E;AAAA,QAC/DC,cAD+D,qBAC/DA,cAD+D;;AAGnF,QAAMC,eAAe,GAAG,MAAM;AAC5BN,IAAAA,WAAW,GADiB,CACZ;;AAChBH,IAAAA,KAAK,CAACU,GAAN,CAAU,iBAAV,EACGC,IADH,CACQC,QAAQ,IAAI;AAAG;AACnB,YAAMC,eAAe,GAAGD,QAAQ,CAACE,IAAjC;AACAV,MAAAA,kBAAkB,CAACS,eAAD,CAAlB,CAFgB,CAEwB;AACzC,KAJH,EAKGE,KALH,CAKSC,GAAG,IAAI;AAAG;AACfC,MAAAA,OAAO,CAACC,KAAR,CAAc,IAAIC,KAAJ,CAAUH,GAAV,CAAd;AACAX,MAAAA,iBAAiB,GAFL,CAEU;AACvB,KARH;AASD,GAXD;;AAaA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIE,UAAU,CAAE;AAAF,IACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADM,CACmB;AADnB,IAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAQ,IAAA,OAAO,EAAE,MAAME,eAAe,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,cAAc,CAACY,GAAf,CAAmBC,SAAS,IAC3B;AAAI,IAAA,GAAG,EAAEA,SAAS,CAACC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACMD,SAAS,CAACE,IADhB,eACyBF,SAAS,CAACG,GADnC,OADD,CADH,CAFA,CAJR,CADF;AAkBD,CAlCD;;AAoCA,eAAevB,SAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nconst SharePage = ({ store, requestData, receiveDataSuccess, receiveDataFailed }) => {\n  const { isFetching, characterArray } = store.characters;\n\n  const handleFetchData = () => {\n    requestData();  // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n    axios.get('/api/characters')\n      .then(response => {  // データ受け取りに成功した場合\n        const _characterArray = response.data;\n        receiveDataSuccess(_characterArray);    // データをstoreに保存するとともにisFetchingをfalseに\n      })\n      .catch(err => {  // データ受け取りに失敗した場合\n        console.error(new Error(err))\n        receiveDataFailed();  // isFetchingをfalseに\n      })\n  }\n\n  return (\n    <div>\n      {\n        isFetching  // isFetchingの値で分岐\n          ? <h2>Now Loading...</h2>  // データをFetch中ならばローディングアイコンを表示\n          : <div>\n            <button onClick={() => handleFetchData()}>fetch data</button>\n            <ul>\n              {characterArray.map(character => (\n                <li key={character._id}>\n                  {`${character.name} (${character.age})`}\n                </li>\n              ))}\n            </ul>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default SharePage;\n"]},"metadata":{},"sourceType":"module"}