{"ast":null,"code":"var _jsxFileName = \"/Users/kirisawakohei/Works/React/KashitaruApp/client/src/Component/sharePageScreen/index.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport './style.css';\n\nclass MyForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault(); // フォームsubmit時のデフォルトの動作を抑制\n\n      const _this$props = this.props,\n            store = _this$props.store,\n            initializeForm = _this$props.initializeForm,\n            receiveDataFailed = _this$props.receiveDataFailed;\n      const _store$shareForm = store.shareForm,\n            productName = _store$shareForm.productName,\n            companyName = _store$shareForm.companyName,\n            name = _store$shareForm.name,\n            mailAddress = _store$shareForm.mailAddress,\n            companyAddress = _store$shareForm.companyAddress,\n            comment = _store$shareForm.comment;\n      axios.post('/api/share', {\n        productName,\n        companyName,\n        name,\n        mailAddress,\n        companyAddress,\n        comment\n      }) // オブジェクトをサーバーにPOST\n      .then(response => {\n        initializeForm(); // submit後はフォームを初期化\n\n        console.log(response);\n        /*const characterArray = response.data;\n        receiveDataSuccess(characterArray);*/\n      }).catch(err => {\n        receiveDataFailed();\n        console.error(new Error(err));\n      });\n    };\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          store = _this$props2.store,\n          changeProductName = _this$props2.changeProductName,\n          changeCompanyName = _this$props2.changeCompanyName,\n          changeName = _this$props2.changeName,\n          changeMailAddress = _this$props2.changeMailAddress,\n          changeCompanyAddress = _this$props2.changeCompanyAddress,\n          changeComment = _this$props2.changeComment;\n    const _store$shareForm2 = store.shareForm,\n          productName = _store$shareForm2.productName,\n          companyName = _store$shareForm2.companyName,\n          name = _store$shareForm2.name,\n          mailAddress = _store$shareForm2.mailAddress,\n          companyAddress = _store$shareForm2.companyAddress,\n          comment = _store$shareForm2.comment;\n    return React.createElement(ValidatorForm, {\n      ref: \"form\",\n      onSubmit: this.handleSubmit,\n      onError: errors => console.log(errors),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inputs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(TextValidator, {\n      label: \"\\u30B7\\u30A7\\u30A2\\u30EA\\u30F3\\u30B0\\u3057\\u305F\\u3044\\u5546\\u54C1\",\n      onChange: e => changeProductName(e.target.value),\n      value: productName,\n      validators: ['required', 'isEmail'],\n      errorMessages: ['this field is required', 'email is not valid'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(TextValidator, {\n      label: \"\\u4F1A\\u793E\\u540D\",\n      onChange: e => changeCompanyName(e.target.value),\n      value: companyName,\n      validators: ['required', 'isEmail'],\n      errorMessages: ['this field is required', 'email is not valid'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(TextValidator, {\n      label: \"\\u540D\\u524D\",\n      onChange: e => changeName(e.target.value),\n      value: name,\n      validators: ['required', 'isEmail'],\n      errorMessages: ['this field is required', 'email is not valid'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(TextValidator, {\n      label: \"\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\",\n      onChange: e => changeMailAddress(e.target.value),\n      value: mailAddress,\n      validators: ['required', 'isEmail'],\n      errorMessages: ['this field is required', 'email is not valid'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(TextValidator, {\n      label: \"\\u4F4F\\u6240\",\n      onChange: e => changeCompanyAddress(e.target.value),\n      value: companyAddress,\n      validators: ['required', 'isEmail'],\n      errorMessages: ['this field is required', 'email is not valid'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(TextValidator, {\n      label: \"\\u30B3\\u30E1\\u30F3\\u30C8\",\n      onChange: e => changeComment(e.target.value),\n      value: comment,\n      validators: ['required', 'isEmail'],\n      errorMessages: ['this field is required', 'email is not valid'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default MyForm;","map":{"version":3,"sources":["/Users/kirisawakohei/Works/React/KashitaruApp/client/src/Component/sharePageScreen/index.js"],"names":["React","axios","Button","ValidatorForm","TextValidator","MyForm","Component","handleSubmit","e","preventDefault","props","store","initializeForm","receiveDataFailed","shareForm","productName","companyName","name","mailAddress","companyAddress","comment","post","then","response","console","log","catch","err","error","Error","render","changeProductName","changeCompanyName","changeName","changeMailAddress","changeCompanyAddress","changeComment","errors","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport './style.css';\n\nclass MyForm extends React.Component {\n\n  handleSubmit = e => {\n    e.preventDefault()    // フォームsubmit時のデフォルトの動作を抑制\n\n    const {\n      store,\n      initializeForm,\n      receiveDataFailed,\n    } = this.props;\n\n    const {\n      productName,\n      companyName,\n      name,\n      mailAddress,\n      companyAddress,\n      comment\n    } = store.shareForm;\n\n    axios.post('/api/share', {\n      productName,\n      companyName,\n      name,\n      mailAddress,\n      companyAddress,\n      comment\n    })                    // オブジェクトをサーバーにPOST\n      .then(response => {\n        initializeForm(); // submit後はフォームを初期化\n        console.log(response);\n        /*const characterArray = response.data;\n        receiveDataSuccess(characterArray);*/\n      })\n      .catch(err => {\n        receiveDataFailed();\n        console.error(new Error(err))\n      })\n  }\n\n  render() {\n    const {\n      store,\n      changeProductName,\n      changeCompanyName,\n      changeName,\n      changeMailAddress,\n      changeCompanyAddress,\n      changeComment,\n    } = this.props;\n\n    const {\n      productName,\n      companyName,\n      name,\n      mailAddress,\n      companyAddress,\n      comment\n    } = store.shareForm;\n\n\n\n    return (\n      <ValidatorForm\n        ref=\"form\"\n        onSubmit={this.handleSubmit}\n        onError={errors => console.log(errors)}\n      >\n        <div className=\"inputs\">\n          <TextValidator\n            label=\"シェアリングしたい商品\"\n            onChange={e => changeProductName(e.target.value)}\n            value={productName}\n            validators={['required', 'isEmail']}\n            errorMessages={['this field is required', 'email is not valid']}\n          />\n          <TextValidator\n            label=\"会社名\"\n            onChange={e => changeCompanyName(e.target.value)}\n            value={companyName}\n            validators={['required', 'isEmail']}\n            errorMessages={['this field is required', 'email is not valid']}\n          />\n          <TextValidator\n            label=\"名前\"\n            onChange={e => changeName(e.target.value)}\n            value={name}\n            validators={['required', 'isEmail']}\n            errorMessages={['this field is required', 'email is not valid']}\n          />\n          <TextValidator\n            label=\"メールアドレス\"\n            onChange={e => changeMailAddress(e.target.value)}\n            value={mailAddress}\n            validators={['required', 'isEmail']}\n            errorMessages={['this field is required', 'email is not valid']}\n          />\n          <TextValidator\n            label=\"住所\"\n            onChange={e => changeCompanyAddress(e.target.value)}\n            value={companyAddress}\n            validators={['required', 'isEmail']}\n            errorMessages={['this field is required', 'email is not valid']}\n          />\n          <TextValidator\n            label=\"コメント\"\n            onChange={e => changeComment(e.target.value)}\n            value={comment}\n            validators={['required', 'isEmail']}\n            errorMessages={['this field is required', 'email is not valid']}\n          />\n          <Button type=\"submit\">Submit</Button>\n        </div>\n      </ValidatorForm>\n    );\n  }\n}\n\nexport default MyForm;\n"]},"metadata":{},"sourceType":"module"}